<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>hugo on Roy Tang</title>
      <link>https://mirror.roytang.net/tags/hugo/</link>
      <description>Recent content in hugo on Roy Tang</description>
      <generator>Hugo -- gohugo.io</generator>
      <language>en-us</language>
      <managingEditor>hello@roytang.net (Roy Tang)</managingEditor>
      <webMaster>hello@roytang.net (Roy Tang)</webMaster>
      <lastBuildDate>Sat, 11 Jul 2020 00:00:00 +0000</lastBuildDate>
      
          <atom:link href="https://mirror.roytang.net/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
      
          
      
        <item>
            <title>Using Hugo to Automatically Update Your Github Profile
</title>
            <link>https://mirror.roytang.net/2020/07/hugo-update-github-profile/</link>
            <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
            <author>hello@roytang.net (Roy Tang)</author>
            <guid>https://mirror.roytang.net/2020/07/hugo-update-github-profile/</guid>
            <description>
            
            &lt;p&gt;So recently Github secretly rolled out a new feature where you can create a file named &lt;code&gt;README.md&lt;/code&gt; in a repo named &lt;code&gt;github.com/&amp;lt;your github username&amp;gt;/&amp;lt;your github username&amp;gt;&lt;/code&gt;, and that markdown file would be rendered on your Github profile page. It means, you can now put basically anything you want on your Github profile!&lt;/p&gt;
&lt;p&gt;I just read this &lt;a href=&#34;https://simonwillison.net/2020/Jul/10/self-updating-profile-readme/&#34;&gt;post from Simon Willson&lt;/a&gt; about using this new feature + Github actions and a Python script to automatically generate and update his Github profile. That seemed neat so I thought about how I would do it.&lt;/p&gt;
&lt;p&gt;My blog is already setup to publish using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and &lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis-CI&lt;/a&gt; whenever I push a commit, so I figured I could just ride on that framework. You can already see this in action on &lt;a href=&#34;https://github.com/roytang&#34;&gt;my Github profile page&lt;/a&gt;! Basically, I publish the &lt;code&gt;README.md&lt;/code&gt; using my regular Hugo build, then my Travis script will deploy it to the appropriate repo.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re new to Hugo, the trickiest part of this might be using a custom output format to generate the README.md. This is basically just a bunch of settings in your Hugo config file:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Define a new Markdown media type under &lt;code&gt;mediaTypes&lt;/code&gt; in your config file. For a TOML config file, that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;    [&lt;span style=&#34;color:#a6e22e&#34;&gt;mediaTypes&lt;/span&gt;]
        [&lt;span style=&#34;color:#a6e22e&#34;&gt;mediaTypes&lt;/span&gt;.&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/markdown&amp;#34;&lt;/span&gt;]
            &lt;span style=&#34;color:#a6e22e&#34;&gt;suffixes&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;md&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define a &amp;ldquo;readme&amp;rdquo; output format (or whatever you want to name it) under &lt;code&gt;outputFormats&lt;/code&gt; in your config file. For a TOML config file, that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;outputFormats&lt;/span&gt;]
  [&lt;span style=&#34;color:#a6e22e&#34;&gt;outputFormats&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readme&lt;/span&gt;]
    &lt;span style=&#34;color:#a6e22e&#34;&gt;baseName&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;README&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;mediaType&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/markdown&amp;#34;&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;baseName&lt;/code&gt; here controls the output file name, while the extension is controlled by the suffixes in step 1. The &lt;code&gt;mediaType&lt;/code&gt; you use here should match the one in step&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next is to specify which pages should have this custom output format. I used my home page for this, so under &lt;code&gt;outputs&lt;/code&gt; in the config file I added the name of the output format (&amp;ldquo;readme&amp;rdquo;) in my case under &amp;ldquo;home&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;outputs&lt;/span&gt;]
  &lt;span style=&#34;color:#a6e22e&#34;&gt;home&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HTML&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RSS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jsonfeed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hfeed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;readme&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Last step, in your theme or your layouts folder, create a file named &lt;code&gt;index.README.md&lt;/code&gt;. This will be the template used to generate the README file. Remember that this is a template to generate markdown. You can use all the normal Hugo template functions, but your output should be markdown. Here&amp;rsquo;s part of what I put in my template, which generates a list of my most recent blog posts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go-html-template&#34; data-lang=&#34;go-html-template&#34;&gt;Latest blog posts:
&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$pages&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;first&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;site&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.RegularPages&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Type&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;    
&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$pages&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;
- [&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;.Title&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;](&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;.Permalink&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;)&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;

[View all posts](&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;.Permalink&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;blog)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you&amp;rsquo;re not yet too familiar with Hugo templates, you can maybe just use the above example directly first to see what it outputs. (You might need to replace &lt;code&gt;post&lt;/code&gt; with &lt;code&gt;posts&lt;/code&gt; or whatever your main post type is).&lt;/p&gt;
&lt;p&gt;Once you have these setup, just run your usual hugo build and check the output folder to see if the README.md file was generated correctly. It should be in the root of the output folder, same place as the &lt;code&gt;index.html&lt;/code&gt; for your home page. One problem I encountered with Hugo is that it insists on lowercasing all the output files, so the output file in my case is always &lt;code&gt;readme.md&lt;/code&gt; and not &lt;code&gt;README.md&lt;/code&gt;. I just solved this by renaming it during the Travis build.&lt;/p&gt;
&lt;p&gt;I won&amp;rsquo;t discuss the travis deployment process anymore here; if you&amp;rsquo;ve done CI with Travis and Github integration before, it&amp;rsquo;s relatively straightforward to add a step to copy the readme file from the Hugo build output to the appropriate repository.&lt;/p&gt;
&lt;p&gt;After setting this up, my Github profile page now automatically updates with my latest blog posts/notes/shared links! (I didn&amp;rsquo;t include photos to keep things simple). The update happens every time my site itself gets a new build, so that&amp;rsquo;s pretty neat. I&amp;rsquo;ve attached an image of the new Github profile page for reference!&lt;/p&gt;



&lt;img src=&#34;https://mirror.roytang.net/2020/07/hugo-update-github-profile/sample_hucb5e7c9f1f7a14a92d223160e1fe09f1_359089_300x0_resize_box_2.png&#34; /&gt;



            </description>
        </item>
    
        <item>
            <title>Image Lightboxes using HTML/CSS
</title>
            <link>https://mirror.roytang.net/2020/07/image-lightboxes-using-html/css/</link>
            <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
            <author>hello@roytang.net (Roy Tang)</author>
            <guid>https://mirror.roytang.net/2020/07/image-lightboxes-using-html/css/</guid>
            <description>
            
            &lt;p&gt;In several places on this site (like if you click &lt;a href=&#34;https://mirror.roytang.net/photos/&#34;&gt;Photos&lt;/a&gt; in the menu up top), I have a grid-like view of a list of photos/images:&lt;/p&gt;











&lt;a href=&#34;#faccc892f8e2cf4a4264858849ce5ae2-lightbox&#34;&gt;
    &lt;figure&gt;
      &lt;img src=&#34;https://mirror.roytang.net/2020/07/image-lightboxes-using-html/css/photos_hua697e57b9c5f61f8be116df80d63f53b_922940_300x0_resize_box_2.png&#34; alt=&#34;&#34; title=&#34;&#34; class=&#34;tn&#34; /&gt;
      &lt;figcaption&gt; (Click to view full-size)&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/a&gt;
&lt;div class=&#34;lightbox&#34; id=&#34;faccc892f8e2cf4a4264858849ce5ae2-lightbox&#34; style=&#34;display: none;&#34;&gt;
  &lt;a href=&#34;#_&#34;&gt;
    &lt;img src=&#34;https://mirror.roytang.net/2020/07/image-lightboxes-using-html/css/photos.png&#34; /&gt;
  &lt;/a&gt;
  &lt;div class=&#34;lightbox_overlay&#34;&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;time class=&#34;dt-published&#34; datetime=&#34;1 Jul 2020 12:00am&#34;&gt;1 Jul 2020 12:00am&lt;/time&gt;&lt;a href=&#34;#_&#34;&gt;Close&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I used to just have each thumbnail open the post permalink on click, with the anchor set to the image itself. The image would be shown in full size inline of the post. This was a bit clunky and not so modern, so I decided to implement it so that the image lists instead will show a &lt;a href=&#34;https://en.wikipedia.org/wiki/Lightbox_%28JavaScript%29&#34;&gt;Lightbox&lt;/a&gt;-style overlay with the full image and some details and an option to click through to the post. That looks a little something like this:&lt;/p&gt;











&lt;a href=&#34;#69db43a1058dcdddf90179b43e7ecf6d-lightbox&#34;&gt;
    &lt;figure&gt;
      &lt;img src=&#34;https://mirror.roytang.net/2020/07/image-lightboxes-using-html/css/lightbox_hu396d03ff45b11c54616c22d72e1875ca_532641_300x0_resize_box_2.png&#34; alt=&#34;&#34; title=&#34;&#34; class=&#34;tn&#34; /&gt;
      &lt;figcaption&gt; (Click to view full-size)&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/a&gt;
&lt;div class=&#34;lightbox&#34; id=&#34;69db43a1058dcdddf90179b43e7ecf6d-lightbox&#34; style=&#34;display: none;&#34;&gt;
  &lt;a href=&#34;#_&#34;&gt;
    &lt;img src=&#34;https://mirror.roytang.net/2020/07/image-lightboxes-using-html/css/lightbox.png&#34; /&gt;
  &lt;/a&gt;
  &lt;div class=&#34;lightbox_overlay&#34;&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;time class=&#34;dt-published&#34; datetime=&#34;1 Jul 2020 12:00am&#34;&gt;1 Jul 2020 12:00am&lt;/time&gt;&lt;a href=&#34;#_&#34;&gt;Close&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, in the olden days doing this sort of thing required JavaScript (as described in the wikipedia link above to Lightbox). But for the modern web, this can be achieved using HTML and CSS only. The method is described in &lt;a href=&#34;https://jlelse.blog/dev/css-lightbox-hugo/&#34;&gt;this blog post by jlelse&lt;/a&gt;, specifically for use in Hugo themes. The CSS technique is relatively straightforward: you generate two images, a thumbnail, and a hidden full-size one in an overlay. The thumbnail is wrapped in an anchor pointing to the id of the hidden overlay, and the overlay gets displayed via the &lt;code&gt;:target&lt;/code&gt; CSS pseudo-selector.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how that looks in this site&amp;rsquo;s current Hugo templates:&lt;/p&gt;
&lt;p&gt;( &lt;code&gt;.context&lt;/code&gt; is the original image resource, and &lt;code&gt;$thumb&lt;/code&gt; is the generated thumbnail)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go-html-template&#34; data-lang=&#34;go-html-template&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;.context.RelPermalink&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;md5&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-lightbox&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;figure&lt;/span&gt;&amp;gt;
      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$thumb&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.RelPermalink&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$figcaption&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; 
        &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$figcaption&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tn&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;figure&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lightbox&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;.context.RelPermalink&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;md5&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-lightbox&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#_&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;.context.RelPermalink&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;safeURL&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; /&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lightbox_overlay&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$figcaption&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dt-published&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;.postDate&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;.postDate&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;time&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;.mainPermalink&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&amp;gt;View post&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#_&amp;#34;&lt;/span&gt;&amp;gt;Close&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the relevant CSS (I don&amp;rsquo;t use SASS):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lightbox&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;none&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;fixed&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;top&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;bottom&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;z-index&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;999&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;vw&lt;/span&gt;;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;vh&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;background&lt;/span&gt;: rgba(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;);
}
.&lt;span style=&#34;color:#a6e22e&#34;&gt;lightbox_overlay&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;fixed&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;z-index&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bottom&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;background&lt;/span&gt;: rgba(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0.6&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;padding-bottom&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;rem&lt;/span&gt;;
}
.&lt;span style=&#34;color:#a6e22e&#34;&gt;lightbox_overlay&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;rem&lt;/span&gt;;
}
.&lt;span style=&#34;color:#a6e22e&#34;&gt;lightbox&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;absolute&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;top&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bottom&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;max-width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;max-height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;;
}
.&lt;span style=&#34;color:#a6e22e&#34;&gt;lightbox&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;outline&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;none&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;block&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My only changes on top of the jlelse&amp;rsquo;s blog post linked above was to add a second overlay for a caption and date to be shown, and a link to the original post, and a close button. Clicking the post itself also dismisses the overlay (by replacing the URL fragment), but I thought it was more usable to also add an obvious Close button. I also initially wanted to put &amp;ldquo;Previous&amp;rdquo; and &amp;ldquo;Next&amp;rdquo; buttons so that you can easily cycle through the images in a post, but this was a bit more effort. I didn&amp;rsquo;t have a way to &amp;ldquo;look ahead&amp;rdquo; in the loop to get the &amp;ldquo;next&amp;rdquo; image, if any, so I think I would have needed to loop through the images twice? And since I use this image list in a number of places on the site, that was a bit troublesome, so maybe it&amp;rsquo;s something I&amp;rsquo;ll attempt later on?&lt;/p&gt;
&lt;p&gt;In any case, I think the new lightboxes are neat!&lt;/p&gt;



&lt;img src=&#34;https://mirror.roytang.net/2020/07/image-lightboxes-using-html/css/lightbox_hu396d03ff45b11c54616c22d72e1875ca_532641_300x0_resize_box_2.png&#34; /&gt;



&lt;img src=&#34;https://mirror.roytang.net/2020/07/image-lightboxes-using-html/css/photos_hua697e57b9c5f61f8be116df80d63f53b_922940_300x0_resize_box_2.png&#34; /&gt;



            </description>
        </item>
    
        <item>
            <title>One Year with Hugo: Highs and Lows
</title>
            <link>https://mirror.roytang.net/2019/11/one-year-with-hugo/</link>
            <pubDate>Fri, 22 Nov 2019 19:48:47 +0000</pubDate>
            <author>hello@roytang.net (Roy Tang)</author>
            <guid>https://mirror.roytang.net/2019/11/one-year-with-hugo/</guid>
            <description>
            
            &lt;p&gt;It was a bit more than a year ago that I decided to &lt;a href=&#34;https://mirror.roytang.net/2018/11/site-migration-from-wordpress-to-hugo/&#34;&gt;haphazardly and suddenly migrate from Wordpress to Hugo&lt;/a&gt;. It&amp;rsquo;s a good time to look back and reflect on that decision and consider where we are now, and how to move forward.&lt;/p&gt;
&lt;p&gt;Good:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am extremely happy with the site&amp;rsquo;s browser performance. It currently scores an insanely high 96 on &lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Froytang.net&#34;&gt;Google&amp;rsquo;s Pagespeed tool&lt;/a&gt;, and I&amp;rsquo;m pretty sure I I know how to close the remaining 4% gap. (I just need to get around to it.)&lt;/li&gt;
&lt;li&gt;generally all the advantages listed in the original post a year ago. I&amp;rsquo;m particularly happy with managing the posts through the file system, especially with a decent editor like VS Code. I don&amp;rsquo;t miss Wordpress&amp;rsquo;s clunky editor at all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main sticking point right now is that the build time is really high. I have a Travis build script setup that automatically builds the hugo site from source whenever I push a new commit, then the output is committed to a second repo, which is the one deployed to the live site every 15 minutes. This build right now takes on average around 8 mins, which is ridiculous. The hugo build itself takes around 3 mins, the rest is copying files and git clones and push and so on. The build times really skyrocketed when I did the &lt;a href=&#34;https://mirror.roytang.net/2019/10/archive-of-my-own/&#34;&gt;social media archiving&lt;/a&gt;, since the number of markdown files skyrocketed from around 1000 to almost 16,000. For sure, a lot of it is the fault of the theme I am using on this site, because I am adding a lot of features like static comments, image resizing, monthly archives, a bunch of taxonomies, and so on. I don&amp;rsquo;t blame Hugo at all, and I&amp;rsquo;m pretty sure any other static site generator would simply choke on the amount of posts I have. There are surely a lot of optimizations that can be done, but even if I manage to pare down the template generation to bare minimum, I am most probably hitting the limits on disk I/O. As mentioned in &lt;a href=&#34;https://discourse.gohugo.io/t/performance-expectations-for-large-number-of-pages/21887&#34;&gt;this discussion I had on the Hugo forums&lt;/a&gt;, simply copying the entire content folder already takes 30 seconds on my local computer, so that is the bare minimum I could go. This is not an intolerable problem, but it means I don&amp;rsquo;t have immediate feedback when I push a post, it can take at least 15 minutes or more for recent changes.&lt;/li&gt;
&lt;li&gt;There are also a number of dynamic features I want to implement, which are impossible with just a static website. I have a python web app backing the static hugo site which I use for things like search, comments, and so on, but basically there is nontrivial effort when I want to implement new things. This is even less of an issue than the last one, mostly because I enjoy working with Python anyway lol.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The build performance is such a big issue for me that I briefly considered the option of migrating back to Wordpress. Ha! I&amp;rsquo;m not ruling it out, but the fact is I find managing posts through the Wordpress interface to be extremely clunky, especially compared to my current set up.&lt;/p&gt;
&lt;p&gt;Another option would be to write my own database-backed webapp. This is something I&amp;rsquo;ve done before after all, and again, I enjoy working on Python anyway. But it&amp;rsquo;s a lot of work, so maybe shelve that for now.&lt;/p&gt;
&lt;p&gt;Moving forward, I think I&amp;rsquo;m going to stay with my current static hugo + dynamic python support, and try to optimize the build time as much as I can. I will probably be on the look out for possible alternative solutions, some other blogging software perhaps, or some other hybrid approach.&lt;/p&gt;



            </description>
        </item>
    
        <item>
            <title>Move Fast, Break Things
</title>
            <link>https://mirror.roytang.net/2019/07/move-fast-break-things/</link>
            <pubDate>Tue, 30 Jul 2019 03:06:26 +0000</pubDate>
            <author>hello@roytang.net (Roy Tang)</author>
            <guid>https://mirror.roytang.net/2019/07/move-fast-break-things/</guid>
            <description>
            
            &lt;p&gt;As is my wont, I&amp;rsquo;m almost never satisfied with a website&amp;rsquo;s layout, so I&amp;rsquo;ve been tinkering with this blog&amp;rsquo;s layout on the backend. To make a long story short, I decided to start working on &lt;a href=&#34;https://github.com/roytang/hugo-theme-exhale&#34;&gt;a Hugo theme&lt;/a&gt;. It&amp;rsquo;s still largely a work in progress, as there&amp;rsquo;s a bunch of things I wanted to implement. But it was good enough to replace the old one so I went ahead and deployed it, so maybe some bugs here and there on some pages. And I&amp;rsquo;m still tinkering, so probably some minor/major changes as we go along in the next few weeks. Or months. Who knows how long it will take? There were some conflicts with the old theme and the new theme which meant I had to modify some of my main blog files to support the new theme and the amount of uncommitted changes I had was getting unwieldy, so I figured I&amp;rsquo;d just &amp;ldquo;move fast and break things&amp;rdquo;, as it were. (I realize that a more sensible programmer would have done the theme work on a branch to avoid this nonsense, but we are who we are.)&lt;/p&gt;
&lt;p&gt;Anyway, here&amp;rsquo;s a snapshot of the current appearance, for posterity:&lt;/p&gt;
&lt;a href=&#34;#9dfb00422375d1175176707e45e020c3-lightbox&#34;&gt;
    &lt;figure&gt;
      &lt;img src=&#34;https://mirror.roytang.net/2019/07/move-fast-break-things/hugo-theme-2019_hu680d47cc17b9018b3f8d4884f72b4e8d_70639_300x0_resize_box_2.png&#34; alt=&#34;&#34; title=&#34;&#34; class=&#34;tn&#34; /&gt;
      &lt;figcaption&gt; (Click to view full-size)&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/a&gt;
&lt;div class=&#34;lightbox&#34; id=&#34;9dfb00422375d1175176707e45e020c3-lightbox&#34; style=&#34;display: none;&#34;&gt;
  &lt;a href=&#34;#_&#34;&gt;
    &lt;img src=&#34;https://mirror.roytang.net/2019/07/move-fast-break-things/hugo-theme-2019.png&#34; /&gt;
  &lt;/a&gt;
  &lt;div class=&#34;lightbox_overlay&#34;&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;time class=&#34;dt-published&#34; datetime=&#34;30 Jul 2019 3:06am&#34;&gt;30 Jul 2019 3:06am&lt;/time&gt;&lt;a href=&#34;#_&#34;&gt;Close&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve also back-updated some of the older posts where I updated the site theme/layout with a tag &lt;a href=&#34;https://mirror.roytang.net/tags/changelog/&#34;&gt;changelog&lt;/a&gt;, so that I can reference them when I update the about page sometime soonish.&lt;/p&gt;
&lt;p&gt;Aside from my general finnickiness about wanting a new theme approximately every 17 days, another reason I wanted to change the layout was I wanted to try out CSS grid layouting, as it seemed neat and boy I wish this existed back in the IE6 days. Would&amp;rsquo;ve made things a lot easier.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also kind of gone down the rabbit hole of &lt;a href=&#34;https://indieweb.org/&#34;&gt;Indieweb&lt;/a&gt; stuff. The core message of having your own website that contains all your content appeals to me and also aligns with some things I&amp;rsquo;ve been thinking about implementing like importing all of my off-site content into this site as a central repository. Those things are yet to come but with the theme change I&amp;rsquo;ve also started looking into stuff like microformats (should be supported as of now), webmentions, POSSE, and so on. Might be a while before those other things get done though.&lt;/p&gt;
&lt;p&gt;I full technical breakdown of the theme features belongs in &lt;a href=&#34;https://github.com/roytang/hugo-theme-exhale/blob/master/README.md&#34;&gt;the theme&amp;rsquo;s README&lt;/a&gt; and probably in a separate colophon post later on, but we&amp;rsquo;re not there yet and we&amp;rsquo;ll get there when we get there.&lt;/p&gt;
&lt;p&gt;For now, enjoy if you will my obsession with the color green.&lt;/p&gt;



&lt;img src=&#34;https://mirror.roytang.net/2019/07/move-fast-break-things/hugo-theme-2019_hu680d47cc17b9018b3f8d4884f72b4e8d_70639_300x0_resize_box_2.png&#34; /&gt;



            </description>
        </item>
    
        <item>
            <title>Site Migration from Wordpress to Hugo
</title>
            <link>https://mirror.roytang.net/2018/11/site-migration-from-wordpress-to-hugo/</link>
            <pubDate>Wed, 14 Nov 2018 03:06:26 +0000</pubDate>
            <author>hello@roytang.net (Roy Tang)</author>
            <guid>https://mirror.roytang.net/2018/11/site-migration-from-wordpress-to-hugo/</guid>
            <description>
            
            &lt;h3 id=&#34;leaving-wordpress&#34;&gt;Leaving Wordpress&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve been using Wordpress for this blog since circa 2006 I believe, but as I mentioned in an &lt;a href=&#34;https://roytang.net/2018/10/django-blog-application/&#34;&gt;earlier blog post&lt;/a&gt; that I was not 100% happy with using Wordpress for this blog. I have a few issues with Wordpress, none of them a major dealbreaker, but collectively enough to make me consider something else:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the new &lt;a href=&#34;https://wordpress.org/gutenberg/&#34;&gt;Gutenberg editor&lt;/a&gt; set to become standard in 5.0 was in my experience, very clunky and kinda annoying&lt;/li&gt;
&lt;li&gt;the code structure of Wordpress is very deep and complex, sometimes making it difficult for me to make changes I want. I can usually figure it out, but it feels like things are unnecessarily more complicated than they need to be&lt;/li&gt;
&lt;li&gt;Wordpress&amp;rsquo;s rich plugin library is a plus, but it also means having to figure out how to have multiple plugins interoperate with each other. An easy example is that I was using a queueing plugin that didn&amp;rsquo;t work great with the Gutenberg editor&lt;/li&gt;
&lt;li&gt;Wordpress requires a lot of maintenance, including needing to regularly update plugins for security purposes, and comment moderation&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static-site-generators&#34;&gt;Static Site Generators&lt;/h3&gt;
&lt;p&gt;At the same time, while reading across some blogs over the past few months, I had ran into the idea of static site generators, which intrigued me as a Wordpress alternative. SSGs offered several advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I could compose my posts offline and using any &lt;a href=&#34;https://roytang.net/2018/11/my-history-in-text-editors/&#34;&gt;text editor&lt;/a&gt; I wanted, using a simple format like Markdown&lt;/li&gt;
&lt;li&gt;Page load performance is better since Apache will simply serve up the static files, no processing or database hits of any kind&lt;/li&gt;
&lt;li&gt;Static sites don&amp;rsquo;t require security updates of any sort - there&amp;rsquo;s no database or admin backend to be hacked&lt;/li&gt;
&lt;li&gt;Easy backups. In WP I was using a custom plugin for backups. With an SSG, I can simply have the raw content stored in Github, then the static content &amp;ldquo;built&amp;rdquo; from there. The content always exists in at least three places - the actual site, Github, and my local computer I use for posting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;why-hugo&#34;&gt;Why Hugo&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s quite a lot of static site generators available right now actually. The most popular one seems to be &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; which is ruby-based. I first decided to try &lt;a href=&#34;https://blog.getpelican.com/&#34;&gt;Pelican&lt;/a&gt; because I preferred Python over Ruby. However, it turned out problematic on my Windows machine, I encountered some interoperability problems with pandoc for the WP migration. I didn&amp;rsquo;t want to have too many dependencies and issues with dependencies because I would later want to deploy the generator itself to my hosting on Webfaction for automated deployments, so I wanted the setup to be as easy as possible.&lt;/p&gt;
&lt;p&gt;Then I stumbled upon &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;, which offered two main advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the MSP was performance. I wanted to migrate over the entire history of the blog, which was almost 900 posts at this point.&lt;/li&gt;
&lt;li&gt;no external dependencies - all I needed was to download the hugo executable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After reading up and testing a bit of Hugo, I had a fit of &amp;ldquo;I couldn&amp;rsquo;t sleep, I&amp;rsquo;ll just go ahead and do the site migration now&amp;rdquo; that I would later regret since it completely screwed up my sleep schedule.&lt;/p&gt;
&lt;h3 id=&#34;wordpress-export&#34;&gt;Wordpress Export&lt;/h3&gt;
&lt;p&gt;I used the &lt;a href=&#34;https://github.com/SchumacherFM/wordpress-to-hugo-exporter&#34;&gt;Wordpress to Hugo plugin&lt;/a&gt; to convert my Wordpress content for Hugo. Many posts had reported problems with this plugin, but I didn&amp;rsquo;t have any issues with its basic operation. I had a two problems with it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when exporting existing Wordpress comments, it didn&amp;rsquo;t include the commenter&amp;rsquo;s URL, which I felt I should include&lt;/li&gt;
&lt;li&gt;all the posts were exported into a single &lt;code&gt;posts&lt;/code&gt; folder. While this didn&amp;rsquo;t create any permalinks issues due to each post having the &lt;code&gt;url&lt;/code&gt; attribute in the frontmatter, it made the entire folder look very unorganized since I had almost 900+ posts. I preferred that the posts be grouped by year and month, matching the &lt;code&gt;/yyyy/mm/slug/&lt;/code&gt; format of the permalink&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since I had the source for the plugin, it was straightforward to fix both issues myself.&lt;/p&gt;
&lt;p&gt;After getting the export from the plugin, I still had a bit of post-processing and cleaning up of the posts to do.&lt;/p&gt;
&lt;p&gt;For one thing, all the single-quotes in the exported posts seem to have been converted to HTML entities for that smart quote thing, so I had to reverse that. Luckily, it was a simple find and replace across text files. The format for embedding posts such as Twitter, Youtube, etc was different as well, I had to correct those files one by one.&lt;/p&gt;
&lt;h3 id=&#34;cleaning-up-the-taxanomies&#34;&gt;Cleaning up the taxanomies&lt;/h3&gt;
&lt;p&gt;I had always wanted to clean up the categories in the blog, but I never got around to it with Wordpress because I didn&amp;rsquo;t feel like figuring out the SQL I would have needed to do it. (I&amp;rsquo;ve never liked Wordpress&amp;rsquo;s table structure.). With Hugo, all I had to do was update a bunch of text files, which I was much more comfortable with. This involved simply importing a Python library to &lt;a href=&#34;https://elbauldelprogramador.com/en/how-to-parse-frontmatter-with-python/&#34;&gt;parse frontmatter&lt;/a&gt;, and a &lt;a href=&#34;https://github.com/roytang/blog/blob/master/utils/clean_categories.py&#34;&gt;script&lt;/a&gt; to do the conversion.&lt;/p&gt;
&lt;h3 id=&#34;generating-the-archive-pages&#34;&gt;Generating the archive pages&lt;/h3&gt;
&lt;p&gt;Hugo doesn&amp;rsquo;t have built-in support for archive pages, so I had to create them myself. I followed the setup described in &lt;a href=&#34;https://blog.atj.me/2017/10/generate-yearly-and-monthly-archive-pages-with-hugo-sections/&#34;&gt;this blog post&lt;/a&gt; and wrote a python &lt;a href=&#34;https://github.com/roytang/blog/blob/master/utils/create-archives.py&#34;&gt;script&lt;/a&gt; to generate the individual year/month archive pages.&lt;/p&gt;
&lt;p&gt;A bigger problem was the archive listing (the page that would link to the individual archive pages). Because the blog has been running for 15 years, there&amp;rsquo;s a whole lot, so I preferred to organize them in a table like this:&lt;/p&gt;











&lt;a href=&#34;#bc6ffeab2c0e919e9cfc9edeb1084a63-lightbox&#34;&gt;
    &lt;figure&gt;
      &lt;img src=&#34;https://mirror.roytang.net/2018/11/site-migration-from-wordpress-to-hugo/archive-grid_hue4b4a2fae19a0f11e617fa08057e7adf_25861_300x0_resize_box_2.png&#34; alt=&#34;&#34; title=&#34;&#34; class=&#34;tn&#34; /&gt;
      &lt;figcaption&gt; (Click to view full-size)&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/a&gt;
&lt;div class=&#34;lightbox&#34; id=&#34;bc6ffeab2c0e919e9cfc9edeb1084a63-lightbox&#34; style=&#34;display: none;&#34;&gt;
  &lt;a href=&#34;#_&#34;&gt;
    &lt;img src=&#34;https://mirror.roytang.net/2018/11/site-migration-from-wordpress-to-hugo/archive-grid.png&#34; /&gt;
  &lt;/a&gt;
  &lt;div class=&#34;lightbox_overlay&#34;&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;time class=&#34;dt-published&#34; datetime=&#34;14 Nov 2018 3:06am&#34;&gt;14 Nov 2018 3:06am&lt;/time&gt;&lt;a href=&#34;#_&#34;&gt;Close&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I actually couldn&amp;rsquo;t find a decent Wordpress plugin that did this for me exactly, so I wrote my &lt;a href=&#34;https://github.com/roytang/wp_grid_archive/&#34;&gt;own plugin&lt;/a&gt; for this.&lt;/p&gt;
&lt;p&gt;For Hugo, I struggled with this a while and was close to figure out when I finally got the approach right. CHeck &lt;a href=&#34;https://mirror.roytang.net/archives&#34;&gt;my archives page&lt;/a&gt; for how it turned out. The upside is I got to become a bit familiar with &lt;a href=&#34;https://golang.org/,&#34;&gt;https://golang.org/,&lt;/a&gt; particularly the way content is parsed and processed in Hugo templates.&lt;/p&gt;
&lt;h3 id=&#34;custom-shortcodes&#34;&gt;Custom shortcodes&lt;/h3&gt;
&lt;p&gt;I had some custom-formatted code in Wordpress that wasn&amp;rsquo;t exported properly by the plugin. This required I create some new shortcodes for Hugo and replace the corresponding calls.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spoilers. I had only recently added this WP plugin, and only one post was using it so this was straightforward. I created the spoiler shortcode and added some simple jQuery-backed code to toggle the spoiler content. I would have preferred doing this with vanilla JS so as to avoid the jQuery dependency, but I decided to put off learning how to do that for another day.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mirror.roytang.net/categories/magic-the-gathering&#34;&gt;MTG&lt;/a&gt; Decklists and card links. Individual card links wasn&amp;rsquo;t an issue - I just generated an anchor as needed, and had to clean up some of the pages that used it. The decklist part was more challenging, as it involved a lot of text parsing. I managed to get it working to a point where the decklists were formatted correctly, but individual cards weren&amp;rsquo;t linked, before deciding to give up. The main issue is I haven&amp;rsquo;t figured out how to parse each line to split the card count and the card name, if the card count exists, i.e. &amp;ldquo;3 Lightning Bolt&amp;rdquo;. I considered just adding JavaScript to format the contents post-load, but the current behavior will do for now. Maybe I&amp;rsquo;ll even revisit the Hugo parsing issue later.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;redirects&#34;&gt;Redirects&lt;/h3&gt;
&lt;p&gt;I wanted to minimize changes in the URLs of older content, so the permalinks for the old posts were kept in place. Another issue was the RSS feed, generated at &lt;code&gt;/index.xml&lt;/code&gt; by Hugo, which I wanted at &lt;code&gt;/feed/&lt;/code&gt; so that feed readers don&amp;rsquo;t need to be updated. A simple redirect in .htaccess was enough to get this done. I&amp;rsquo;m not much good at regexes, so I had to reference another &lt;a href=&#34;https://blog.philipphauer.de/moving-wordpress-hugo/&#34;&gt;blog post&lt;/a&gt; for this one. The RSS feeds for categories/tags has changed, I think that&amp;rsquo;s fine.&lt;/p&gt;
&lt;h3 id=&#34;automatic-deployment&#34;&gt;Automatic Deployment&lt;/h3&gt;
&lt;p&gt;I referenced another &lt;a href=&#34;https://gomakethings.com/automating-the-deployment-of-your-static-site-with-hugo-and-github/&#34;&gt;blog post&lt;/a&gt; for setting up automatic deployment. The main difference was my host was Webfaction while his was Digital Ocean, which did cause me a bit of trouble when I was trying to set up a Github webhook to automatically deploy on every push. It turns out Webfaction doesn&amp;rsquo;t allow me to set an env variable in .htaccess to be read by the PHP script (as was in the blog post linked above). It took me a while to figure out this was the issue, so I just gave up on the Github webhook for now and just set a cron job to periodically pull and redeploy the site. I needed the cron job anyway, if I wanted to support future publishing and possibly some form of queueing later on.&lt;/p&gt;
&lt;h3 id=&#34;comments&#34;&gt;Comments&lt;/h3&gt;
&lt;p&gt;Legacy comments from WP are imported directly into the markdown of each page. Future comments are now handled using Disqus. I already had a Disqus account before, I forgot why I stopped using it. That being said, outsourcing the comments makes a lot of sense.&lt;/p&gt;
&lt;h3 id=&#34;limitations&#34;&gt;Limitations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;we lose the site search for now. There are some workarounds, including Google SiteSearch (I believe it has ads) or building a JSON index and searching on the client-side (seems impractical given the number of posts). I believe I&amp;rsquo;m the only one using the site search anyway, I&amp;rsquo;ll revisit this at another time.&lt;/li&gt;
&lt;li&gt;the markdown engine allows raw HTML in the content, but if you have any line breaks in between, your structure breaks, so that required some cleanup&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;theme&#34;&gt;Theme&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m not much of a CSS/site design guy, I&amp;rsquo;m more a &amp;ldquo;find an existing theme and tweak it to your liking&amp;rdquo; guy, so I browsed Hugo&amp;rsquo;s available themes for a while and settled on &lt;a href=&#34;https://github.com/enten/hyde-y&#34;&gt;Hyde-Y&lt;/a&gt;, which I proceeded to modify a bit, adding a picture to the sidebar and so on. It&amp;rsquo;s simple and clean and straightforward, nothing too fancy. Maybe I&amp;rsquo;ll revisit the theme later.&lt;/p&gt;
&lt;p&gt;For posterity&amp;rsquo;s sake, a screenshot of the new layout/theme:&lt;/p&gt;











&lt;a href=&#34;#860b271077bc60f75bc0ebe8bec296c9-lightbox&#34;&gt;
    &lt;figure&gt;
      &lt;img src=&#34;https://mirror.roytang.net/2018/11/site-migration-from-wordpress-to-hugo/blog-hugo-2018_hu3440e873d4f85fe686378e137aba5439_180987_300x0_resize_box_2.png&#34; alt=&#34;&#34; title=&#34;&#34; class=&#34;tn&#34; /&gt;
      &lt;figcaption&gt; (Click to view full-size)&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/a&gt;
&lt;div class=&#34;lightbox&#34; id=&#34;860b271077bc60f75bc0ebe8bec296c9-lightbox&#34; style=&#34;display: none;&#34;&gt;
  &lt;a href=&#34;#_&#34;&gt;
    &lt;img src=&#34;https://mirror.roytang.net/2018/11/site-migration-from-wordpress-to-hugo/blog-hugo-2018.png&#34; /&gt;
  &lt;/a&gt;
  &lt;div class=&#34;lightbox_overlay&#34;&gt;
    &lt;p&gt;&lt;/p&gt;
    &lt;time class=&#34;dt-published&#34; datetime=&#34;14 Nov 2018 3:06am&#34;&gt;14 Nov 2018 3:06am&lt;/time&gt;&lt;a href=&#34;#_&#34;&gt;Close&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;At the end of it, it turned out a bit more effort than I expected. I&amp;rsquo;ll probably be cleaning up the exported older posts every so often because I&amp;rsquo;m OC that well. The theming/templating turned out to be a bit more complicated than I expected, but I think it was easier to manage than Wordpress. The last time I tried to use a custom blog engine, I got tired of maintaining and upating it so I switched back to Wordpress, hopefully that doesn&amp;rsquo;t happen here. Not having to maintain a web interface is a pretty good indicator.&lt;/p&gt;
&lt;p&gt;Despite the effort, the great thing is that I did learn a few things, so at the minimum it&amp;rsquo;s already a win:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a bit of GoLang&lt;/li&gt;
&lt;li&gt;how to create Github Webhooks&lt;/li&gt;
&lt;li&gt;more .htaccess stuff&lt;/li&gt;
&lt;li&gt;usage of pathlib.Path in Python3 (no more os.glob for me!)&lt;/li&gt;
&lt;/ul&gt;



&lt;img src=&#34;https://mirror.roytang.net/2018/11/site-migration-from-wordpress-to-hugo/archive-grid_hue4b4a2fae19a0f11e617fa08057e7adf_25861_300x0_resize_box_2.png&#34; /&gt;



&lt;img src=&#34;https://mirror.roytang.net/2018/11/site-migration-from-wordpress-to-hugo/blog-hugo-2018_hu3440e873d4f85fe686378e137aba5439_180987_300x0_resize_box_2.png&#34; /&gt;



            </description>
        </item>
    
    </channel>
  </rss>